                                            ###########################最长回文子串###########################  
class Solution:
    def longestPalindrome(self, s: str) -> str:
        #中心扩散法
        """
        i,j = 0,0
        if len(s)<=1:return s
        res = ""
        for i in range(len(s)):
            count = 1
            start = i
            end=i+1
            while start>=0 and end<len(s):
                if s[start]==s[end]:
                    count+=1
                    end+=1
                    if count > len(res):
                        res = s[start:end]
                    continue
                else:
                    start-=1
                    while start>=0 and end < len(s):
                        if s[start]==s[end]:
                            count+=2
                            start-=1
                            end+=1
                        else:
                            break
                    if count > len(res):
                        res = s[start+1:end]    
                    break                          
        return res
        """
        #能不能动态规划 dp[i][j]表示，以i,j区间的最长回文子串，这里s[i]一定等于dp[j]
        if len(s)<=1: return s
        m = len(s)
        dp = [[ 0 for i in range(m)] for _ in range(m)]
        for i in range(len(s)):
            dp[i][i] = 1
        #递推公式
        res = s[0]
        count = 0
        for i in range(m-2,-1,-1):
            for j in range(i+1,m):
                #首先判断对角线下方是否为0，也就是其是否是回文子串
                if dp[i+1][j-1]:
                    #如果是回文子串的话，判断其两边是否相等，这里保证j-i>1，因为子串不为0，其至少含有一个元素，比如a,那么j-i最小等于2。此时两边同时加1，就是加2
                    if s[i]==s[j] and j-i>1:
                        dp[i][j] = dp[i+1][j-1]+2                    
                else:
                    #如果子串是0的话，也就是说只需要考虑当前字符形成的子串，如果s[i]==s[j],只有当j-i==1的时候，也就是当前元素加1
                    #其实这种情况就是考虑偶数作为中心的情况：相邻相同元素相加
                    if s[i]==s[j] and j-i==1:
                        dp[i][j] = dp[i][j-1] + 1
                if dp[i][j] > count:
                    count = dp[i][j]
                    res = s[i:j+1]
        return res
                                              ###########################最长回文串###########################
class Solution:
    def longestPalindrome(self, s: str) -> int:
        #理解错了，这题是构造最大回文串，不是找最大回文串。。。
        """
        max_ = 0
        count = 1
        i = 0
        while i < len(s) and i >= 0:
            if i > 0 and s[i]==s[i-1]:
                count+=1
                i+=1
                continue
            if count == 1:
                m = i - 1
                n = i + 1
            else:
                m = i-count-1
                n = i
            while 0<=m and n<len(s):
                if s[m]==s[n]:
                    count+=2
                    m-=1
                    n+=1
                else:
                    max_ = max(max_,count)
                    count = 1
                    break
            i+=1
        return max_
        """
        #构造最大回文串,考虑相同子串,别忘了奇数。
        dic = {}
        for i in s:
            dic[i] = dic.get(i,0) + 1
        count = 0
        onechar = False
        for k in dic:
            if dic[k]%2==0:
                count+=dic[k]
            else:
                onechar = True
                count+=dic[k]-1
        return count+1 if onechar else count
                                                   ###########################最长回文子序列###########################
 class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        
        #给出的是一维子序列，但是本题要求的是回文子串，而回文判断需要知道两端值,那么本题目定义就是二维度dp
        #dp[i][j],子串区间i,j形成的最大回文子串
        m = len(s)
        dp = [[0 for _ in range(m)] for _ in range(m)]
        #初始化分析.对脚线值都为1，左下角都为0 因为 i > j
        #遍历顺序可以由递推公式画图即可
        #
        if not s: return 0
        res = 1
        for i in range(m):
            dp[i][i] = 1
        #这里对角线已经赋值了，可以忽略了。
        for i in range(m-2,-1,-1):
            for j in range(i+1,m):
                if s[i]==s[j]:
                    dp[i][j] = dp[i+1][j-1] + 2
                else:
                    dp[i][j] = max(dp[i][j-1],dp[i+1][j])
                res = max(dp[i][j],res)
        return res
                                                  ###########################最长公共子序列###########################
 class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        #dp[i][j],字符串text1[:i+1],text2[:j+1]的最长公共子序列
        #递推公式：text1[i]==text2[j]->dp[i][j] = dp[i-1][j-1]+1  text1[i]!=text2[j]:dp[i][j]==max(dp[i-1][j],dp[i][j-1])
        m = len(text1)
        n = len(text2)
        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[i-1]==text2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])
        return dp[-1][-1]
                                                   ###########################最长公共子串###########################
  
