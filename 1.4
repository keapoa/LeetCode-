class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:

        #这题标准DFS,超时了。。
        """
        self.count = 0
        def DFS(target):
            if target==0:
                self.count+=1
            if target < 0:
                return
            for num in nums:
                DFS(target-num)
        DFS(target)
        return self.count
        """
        #背包解法,这样写会去掉重复的。
        """
        m = len(nums)
        dp = [[0 for _ in range(target+1)] for _ in range(m+1)]
        dp[0][0] = 1
        for i in range(1,m+1):
            num = nums[i-1]
            for j in range(target+1):
                dp[i][j] = dp[i-1][j]
                if j >= num:
                    dp[i][j] += dp[i][j-num]
        return dp[-1][-1]
        """
        #,这题考虑顺序，因此完全符合递归回溯，根据递归流程图,那么转化为背包动态规划方程就是dp[i] = sum(dp[i-num]) num为nums里面的数字
        dp = [0 for i in range(target+1)]
        dp[0] = 1
        for i in range(1,target+1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i-num]
        return dp[-1]
        
